
#Область ПрограммныйИнтерфейс

// Перед началом работы системы запускает процесс извлечения исходников из внешнего объекта.
//
&НаКлиенте
Процедура ИзвлечьИсходники() Экспорт
	
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтотОбъект));
	
КонецПроцедуры

// Инициализация редактора bsl_console
//
// Параметры:
//  ВнешнийОбъект	 - ВнешнийОбъект - defaultView элемента формы поля HTML.
//  РеквизитОбъекта	 - реквизит в котором храниться текст обработчика.
//
&НаКлиенте
Процедура ИнициализацияРедактора(ВнешнийОбъект, РеквизитОбъекта) Экспорт
	
	Инфо = Новый СистемнаяИнформация();
	ВнешнийОбъект.init(Инфо.ВерсияПриложения);
	
	// Очистим элемент от предыдущих значений.
	ВнешнийОбъект.eraseText();
	// Прочитаем текст из реквизита.
	ВнешнийОбъект.setText(РеквизитОбъекта);
	// Установим получение изменения кода.
	ВнешнийОбъект.enableModificationEvent(Истина);
	// Очищаем описание метаданных.
	ОчиститьОписаниеМетаданныхКонсоли(ВнешнийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОписаниеМетаданныхКонсоли(КонсольКода) Экспорт
	
	КонсольКода.clearMetadata();
	
КонецПроцедуры

// Поиск наименования текущей конвертации рекурсией по родителям владельца формы.
//
// Параметры:
//  ВладелецФормы	 - ТаблицаФормы - Таблица Формы ПОД, ПКО или Алгоритмы.
//  Форма	 - ФормаКлиентскогоПриложения - Источник поиска.
//
&НаКлиенте
Процедура ПоискНаименованияТекущейКонвертации(ВладелецФормы, Форма) Экспорт
	
	// Поясняю почему такой костыльный метод использую.
	// 1С:Предприятие 8.3 (8.3.16.1148) - в расширение нельзя переопределить событие динамического списка "Выбор".
	// В ином случае на форме НастройкаПравилОбмена:ОсновнаяФорма нужно при открытии ПОД, ПКО и Алгоритмов просто
	// передавать параметром Объект.Конвертация.
	
	ИскомаяФорма = ВладелецФормы.Родитель;
	Если ТипЗнч(ИскомаяФорма)  = Тип("ФормаКлиентскогоПриложения") Тогда
		Форма["Конвертация"] = ИскомаяФорма.НаименованиеКонвертации;
	Иначе
		ПоискНаименованияТекущейКонвертации(ИскомаяФорма, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик событий HTML поля.
//
// Параметры:
//  Форма			 - ФормаКлиентскогоПриложения - форма источник.
//  ДанныеСобытия	 - ФиксированнаяСтруктура - структура событий.
//
&НаКлиенте
Процедура ПриНажатии(Форма, ДанныеСобытия, ЭлементФормы) Экспорт
	
	Событие = ДанныеСобытия.Event.eventData1C;
	
	Если Событие <> Неопределено Тогда
		
		ИмяСобытия = Событие.event;
		Если ИмяСобытия = "EVENT_CONTENT_CHANGED" Тогда
			
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ИмяСобытия = "EVENT_GET_METADATA" Тогда
			
			ОбработкаСобытияПолученияМетаданных(Событие, ЭлементФормы, Форма["Конвертация"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет тему консоли.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения - форма источник команды.
//  КонсольКода	 - Строка - Имя реквизита формы консоли.
//  СветлаяТема	 - Булево.
//
&НаКлиенте
Процедура СменитьТему(Форма, КонсольКода, СветлаяТема) Экспорт
	
	СветлаяТема = Не СветлаяТема;
	ИмяКнопки = "СменитьТему" + КонсольКода;
	Если СветлаяТема Тогда
		
		Тема = "bsl-white";
		Форма.Элементы[ИмяКнопки].Заголовок = "Темная";
		Форма.Элементы[ИмяКнопки].ЦветФона = WebЦвета.Черный;
		Форма.Элементы[ИмяКнопки].ЦветТекста = WebЦвета.Белый;
		
	Иначе
		
		Тема = "bsl-dark";
		Форма.Элементы[ИмяКнопки].Заголовок = "Светлая";
		Форма.Элементы[ИмяКнопки].ЦветФона = Новый Цвет();
		Форма.Элементы[ИмяКнопки].ЦветТекста = Новый Цвет();
		
	КонецЕсли;
	
	Форма.Элементы[КонсольКода].Документ.monaco.editor.setTheme(Тема);
	
КонецПроцедуры

// Установка атрибутов консоли кода. Вызывается после того как HTML сформирован.
//
// Параметры:
//  КонсольКода						 - ВнешнийОбъект - подключенная консоль кода.
//  Алгоритм						 - Строка - код обработчика хранящийся в соответствующем реквизите.
//  КонсольСформирована				 - Булево - признак того, что консоль была сформирована.
//  РеквизитОписаниеМетаданныхJSON	 - Строка - реквизит содержащий описание метаданных в формате JSON.
//
&НаКлиенте
Процедура УстановкаАтрибутовКонсолиКода(КонсольКода, Алгоритм, КонсольСформирована) Экспорт
	
	//КонсольКодаПередКонвертацией.createVanessaEditor("", "bsl");
	
	ИнициализацияРедактора(КонсольКода, Алгоритм);
	//КонсольКода.setReadOnly(Истина);
	КонсольСформирована = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРеквизитуКонсолиАдрес(Форма, ИмяЭлемента) Экспорт
	
	Если ПустаяСтрока(Форма[ИмяЭлемента + "HTML"]) Тогда
		Форма[ИмяЭлемента + "HTML"] = АдресКонсолиКода;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создать консоль на форме.
//
// Параметры:
//  ЭлементАлгоритма - ПолеФормы - поле содержащее код обработчика по умолчанию.
//  ЭлементРодитель	 - ГруппаФормы - родитель поля формы.
//  Форма			 - ФормаКлиентскогоПриложения - форма источник.
//
&НаСервере
Процедура СоздатьКонсоль(ЭлементАлгоритма, ЭлементРодитель, Форма) Экспорт
	
	ЭлементАлгоритма.Видимость = Ложь;
	
	ИмяРеквизита = ЭлементАлгоритма.Имя + "HTML";
	СоздатьРеквизит(Форма, ИмяРеквизита, "Строка");
	
	СоздатьЭлемент(ИмяРеквизита, ЭлементРодитель, Форма);
	
	СоздатьКоманднуюПанель(ИмяРеквизита, Форма, ЭлементРодитель, ЭлементАлгоритма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФайлами

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	ИдентификаторСессии = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	КаталогИсходников = ИмяКаталога + ИдентификаторСессии + "\";
	
	ДополнительныеПараметры = Новый Структура("КаталогИсходников", КаталогИсходников);
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтотОбъект, ДополнительныеПараметры), КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	ФайлНаДиске = Новый Файл(ДопПараметры.КаталогИсходников);
	ДополнительныеПараметры = Новый Структура("КаталогИсходников", ДопПараметры.КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		
		ДополнительныеПараметры = Новый Структура("КаталогИсходников", ДопПараметры.КаталогИсходников);
		Оповещение = Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтотОбъект, ДополнительныеПараметры);
		НачатьУдалениеФайлов(Оповещение, ДопПараметры.КаталогИсходников, "*.*");
		
	Иначе
		
		Расш1_ЖурналРегистрации.ДобавитьЗапись("Не удалось создать каталог для исходников.", "Ошибка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	АдресМакета = Расш1_КонсольКодаВызовСервера.ПолучитьМакетКонсоли();
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ИмяФайла = ДопПараметры.КаталогИсходников + "bsl_console.zip";
	ДополнительныеПараметры = Новый Структура("КаталогИсходников", ДопПараметры.КаталогИсходников);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтотОбъект, ДополнительныеПараметры);
	ДанныеМакета.НачатьЗапись(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	КаталогИсходников = ДопПараметры.КаталогИсходников;
	Попытка
		
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		ИмяФайлаИсточника = КаталогИсходников + "index.html";
		ИмяФайлаПриемника = КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";
		НачатьКопированиеФайла(Новый ОписаниеОповещения("ПослеКопированияФайлаИсточника", ЭтотОбъект), ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		Расш1_ЖурналРегистрации.ДобавитьЗапись("Не удалось извлечь исходники работы с консолью кода. " + ОписаниеОшибки(), "Ошибка");
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеКопированияФайлаИсточника(СкопированныйФайл, ДопПараметры) Экспорт
	
	АдресКонсолиКода = СкопированныйФайл;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормой

&НаСервере
Процедура СоздатьРеквизит(Форма, ИмяРеквизита, Тип) Экспорт
	
	ТипРеквизита = Новый ОписаниеТипов(Тип, , , , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита);
	
	НовыеРеквизиты = Новый Массив;
	НовыеРеквизиты.Добавить(Реквизит);
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлемент(ИмяЭлемента, Родитель, Форма)
	
	НовыйЭлемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеHTMLДокумента;
	НовыйЭлемент.ПутьКДанным = ИмяЭлемента;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.УстановитьДействие("ДокументСформирован", ИмяЭлемента + "Сформирован");
	НовыйЭлемент.УстановитьДействие("ПриНажатии", ИмяЭлемента + "ПриНажатии");
	НовыйЭлемент.КонтекстноеМеню.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКоманднуюПанель(ЭлементАлгоритма, Форма, Родитель, ЭлементПеред)
	
	ЭлементыФормы = Форма.Элементы;
	КоманднаяПанель = 
		ЭлементыФормы.Вставить(ЭлементАлгоритма + "ПанельКоманд", Тип("ГруппаФормы"), Родитель, ЭлементПеред);
	
	СоздатьГруппуНаправление(Форма, ЭлементАлгоритма, КоманднаяПанель);
	
	// Изменение темы редактора.
	Имя = "СменитьТему" + ЭлементАлгоритма;
	СоздатьКоманду(Форма, Имя);
	ЭлементСменаТемы = ЭлементыФормы.Вставить(Имя, Тип("КнопкаФормы"), КоманднаяПанель);
	ЭлементСменаТемы.Заголовок = "Темная";
	ЭлементСменаТемы.Фигура = ФигураКнопки.Овал;
	ЭлементСменаТемы.ИмяКоманды = Имя;
	ЭлементСменаТемы.ЦветФона = WebЦвета.Черный;
	ЭлементСменаТемы.ЦветТекста = WebЦвета.Белый;
	
	// Заменить все вхождения слова.
	Имя = "ЗаменитьВхождения" + ЭлементАлгоритма;
	Картинка = БиблиотекаКартинок.Расш1_Заменить;
	СоздатьКоманду(Форма, Имя, , Картинка);
	
	ЭлементЗаменитьВхождения = 
		ЭлементыФормы.Вставить(Имя, Тип("КнопкаФормы"), КоманднаяПанель, ЭлементСменаТемы);
	ЭлементЗаменитьВхождения.Заголовок = "Заменить";
	ЭлементЗаменитьВхождения.ИмяКоманды = Имя;
	ЭлементЗаменитьВхождения.Фигура = ФигураКнопки.Овал;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьГруппуНаправление(Форма, ЭлементАлгоритма, КоманднаяПанель)
	
	ЭлементыФормы = Форма.Элементы;
	
	// Меняет описание конфигурации и параметров в зависимости от направления обмена.
	Имя = "Направление" + ЭлементАлгоритма;
	ЭлементГруппаКомандНаправление = ЭлементыФормы.Вставить(Имя, Тип("ГруппаФормы"), КоманднаяПанель);
	ЭлементГруппаКомандНаправление.Заголовок = "Направление";
	ЭлементГруппаКомандНаправление.Подсказка = НСтр("ru = 'Направление обмена'");
	ЭлементГруппаКомандНаправление.Вид = ВидГруппыФормы.Подменю;
	ЭлементГруппаКомандНаправление.Фигура = ФигураКнопки.Овал;
	
	Направление = "Отправка";
	Имя = Направление + ЭлементАлгоритма;
	СоздатьКоманду(Форма, Имя, Направление);
	
	ЭлементНаправлениеОтправка = ЭлементыФормы.Вставить(Имя, Тип("КнопкаФормы"), ЭлементГруппаКомандНаправление);
	ЭлементНаправлениеОтправка.Заголовок = "Отправка";
	ЭлементНаправлениеОтправка.ИмяКоманды = Имя;
	ЭлементНаправлениеОтправка.Картинка = БиблиотекаКартинок.Расш1_Отправка;
	
	Направление = "Получение";
	Имя = Направление + ЭлементАлгоритма;
	СоздатьКоманду(Форма, Имя, Направление);
	
	ЭлементНаправлениеПолучение = ЭлементыФормы.Вставить(Имя, Тип("КнопкаФормы"), ЭлементГруппаКомандНаправление);
	ЭлементНаправлениеПолучение.Заголовок = Направление;
	ЭлементНаправлениеПолучение.ИмяКоманды = Имя;
	ЭлементНаправлениеПолучение.Картинка = БиблиотекаКартинок.Расш1_Получение;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКоманду(Форма, Имя, Направление = "", Картинка = Неопределено)
	
	НоваяКоманда = Форма.Команды.Добавить(Имя);
	НоваяКоманда.Действие = Имя;
	
	Если Не ПустаяСтрока(Направление) Тогда
		НоваяКоманда.Заголовок = Направление;
	КонецЕсли;
	
	Если Картинка <> Неопределено Тогда
		НоваяКоманда.Картинка = Картинка;
	КонецЕсли;
	НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОбработкаСобытияПолученияМетаданных(Событие, ЭлементФормы, Конвертация)
	
	АдресОбновления = "";
	ПараметрыЗапроса = Событие.params;
	
	ОписаниеМетаданныхJSON = Расш1_КонсольКодаВызовСервера.ПолучитьОписаниеОбъектаМетаданныхJSON(
		ПараметрыЗапроса, АдресОбновления, Конвертация);
	
	Если ЗначениеЗаполнено(ОписаниеМетаданныхJSON) Тогда
		
		ЭлементФормыКонсоль = ЭлементФормы.Документ.defaultView;
		
		РезультатОбновления = ЭлементФормыКонсоль.updateMetadata(ОписаниеМетаданныхJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			ЭлементФормыКонсоль.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти