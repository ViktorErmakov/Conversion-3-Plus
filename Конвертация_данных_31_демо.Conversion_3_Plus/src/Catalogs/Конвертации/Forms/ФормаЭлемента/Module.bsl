#Область ОписаниеПеременных

&НаКлиенте
Перем КонсольКодаПередКонвертацией;

&НаКлиенте
Перем КонсольКодаПередОтложеннымЗаполнением;

&НаКлиенте
Перем КонсольКодаПослеКонвертации;

&НаКлиенте
Перем КонсольКодаПередКонвертациейСформирован;

&НаКлиенте
Перем КонсольКодаПередОтложеннымЗаполнениемСформирован;

&НаКлиенте
Перем КонсольКодаПослеКонвертацииСформирован;

&НаКлиенте
Перем СветлаяТемаАлгоритмПередКонвертацией;

&НаКлиенте
Перем СветлаяТемаАлгоритмПередОтложеннымЗаполнением;

&НаКлиенте
Перем СветлаяТемаАлгоритмПослеКонвертации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура Расш1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если КонвертацияXDTO Тогда
		
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПередКонвертацией, Элементы.ПередКонвертацией, ЭтотОбъект);
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПередОтложеннымЗаполнением, Элементы.ПередОтложеннымЗаполнением, ЭтотОбъект);
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПослеКонвертации, Элементы.ПослеКонвертации, ЭтотОбъект);
		
		ИмяЭлементаНаправление = "Направление" + Элементы.АлгоритмПередОтложеннымЗаполнением.Имя + "HTML";
		Элементы[ИмяЭлементаНаправление].Доступность = Ложь;
		
		// Этот реквизит нужен исключительно для поддержки подсказки кода, т.к. в общем модуле читается этот реквизит.
		Расш1_КонсольКода.СоздатьРеквизит(ЭтотОбъект, "Конвертация", "СправочникСсылка.Конвертации");
		ЭтотОбъект["Конвертация"] = Объект.Ссылка;
		
		Расш1_КонсольКода.СоздатьРеквизит(ЭтотОбъект, "Направление", "Строка");
		
		Элементы.СтраницаОбработчики.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПриОткрытииПосле(Отказ)
	
	Если КонвертацияXDTO Тогда
		
		Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПередКонвертацией.Имя);
		Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПередОтложеннымЗаполнением.Имя);
		Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПослеКонвертации.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	
	Если КонвертацияXDTO Тогда
		
		Если Не ВсеКонсолиСформированы() Тогда
			Возврат;
		КонецЕсли;
		
		// Запишем новый текст в реквизиты.
		Объект.АлгоритмПередКонвертацией = КонсольКодаПередКонвертацией.getText();
		Объект.АлгоритмПередОтложеннымЗаполнением = КонсольКодаПередОтложеннымЗаполнением.getText();
		Объект.АлгоритмПослеКонвертации = КонсольКодаПослеКонвертации.getText();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_СтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаКонвертацияXDTO" 
		И Элементы.ГруппаДанныеКонвертацииXDTO.ТекущаяСтраница.Имя = "СтраницаОбработчики" Тогда
		ПослеФормированияКонсолей("ПередКонвертацией");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ГруппаДанныеКонвертацииXDTOПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаОбработчики" Тогда
		ПослеФормированияКонсолей("ПередКонвертацией");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_СтраницыОбработчикиПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	ПослеФормированияКонсолей(ТекущаяСтраница.Имя);
	
	Если ТекущаяСтраница.Имя = "ПередОтложеннымЗаполнением" Тогда
		
		ПолучениеАлгоритмПередОтложеннымЗаполнениемHTML(
			ЭтотОбъект.Команды.Найти("ПолучениеАлгоритмПередОтложеннымЗаполнениемHTML"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПередКонвертациейHTMLСформирован(Элемент)
	
	КонсольКодаПередКонвертацией = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПередКонвертацией, 
		Объект.АлгоритмПередКонвертацией, 
		КонсольКодаПередКонвертациейСформирован);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередКонвертациейHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередОтложеннымЗаполнениемHTMLСформирован(Элемент)
	
	КонсольКодаПередОтложеннымЗаполнением = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПередОтложеннымЗаполнением, 
		Объект.АлгоритмПередОтложеннымЗаполнением, 
		КонсольКодаПередОтложеннымЗаполнениемСформирован);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередОтложеннымЗаполнениемHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПослеКонвертацииHTMLСформирован(Элемент)
	
	КонсольКодаПослеКонвертации = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПослеКонвертации, 
		Объект.АлгоритмПослеКонвертации, 
		КонсольКодаПослеКонвертацииСформирован);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПослеКонвертацииHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СменитьТемуАлгоритмПередКонвертациейHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПередКонвертацией.Имя + "HTML", СветлаяТемаАлгоритмПередКонвертацией);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПередКонвертациейHTML(Команда)
	КонсольКодаПередКонвертацией.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмПередОтложеннымЗаполнениемHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПередОтложеннымЗаполнением.Имя + "HTML", СветлаяТемаАлгоритмПередОтложеннымЗаполнением);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПередОтложеннымЗаполнениемHTML()
	КонсольКодаПередОтложеннымЗаполнением.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмПослеКонвертацииHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПослеКонвертации.Имя + "HTML", СветлаяТемаАлгоритмПослеКонвертации);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПослеКонвертацииHTML(Команда)
	КонсольКодаПослеКонвертации.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПередКонвертациейHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПередКонвертациейHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПередОтложеннымЗаполнениемHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПередОтложеннымЗаполнениемHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПослеКонвертацииHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПослеКонвертацииHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПриИзмененииНаправления(Команда)
	
	Направление = Элементы[Команда.Имя].Заголовок;
	Элементы[Команда.Имя].Родитель.Заголовок = Направление;
	Элементы[Команда.Имя].Родитель.Картинка = Элементы[Команда.Имя].Картинка;
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияКонсолей(ИмяСтраницы = "")
	
	Элементы.СтраницаОбработчики.Доступность = ВсеКонсолиСформированы();
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя <> "СтраницаКонвертацияXDTO" 
		Или Элементы.ГруппаДанныеКонвертацииXDTO.ТекущаяСтраница.Имя <> "СтраницаОбработчики" 
		Или ПустаяСтрока(ЭтотОбъект["Направление"]) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСтраницы) Тогда
		ИмяСтраницы = Элементы.СтраницыОбработчики.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	ОписаниеПользовательскихОбъектовJSON = 
		ПолучитьОписаниеПараметровJSON(ЭтотОбъект["Направление"]);
	
	ОбновитьОписаниеПараметровОбработчиковВоВсехКонсолях(ОписаниеПользовательскихОбъектовJSON, ИмяСтраницы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПараметровJSON(Знач Направление)
	
	ПользовательскиеОбъекты = Новый Структура;
	
	КомпонентыОбмена = Расш1_КоллекцияМетаданных.ПолучитьОписаниеКомпонентыОбмена(Направление);
	ПользовательскиеОбъекты.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	
	ОписаниеПользовательскихОбъектов = Новый Структура;
	ОписаниеПользовательскихОбъектов.Вставить("customObjects", ПользовательскиеОбъекты);
	
	ОписаниеПользовательскихОбъектовJSON = 
		Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданныхJSON(ОписаниеПользовательскихОбъектов);
	
	Возврат ОписаниеПользовательскихОбъектовJSON;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОписаниеПараметровОбработчиковВоВсехКонсолях(ОписаниеПараметровJSON, ИмяСтраницы)
	
	АдресОбновления = "";
	
	Если ИмяСтраницы = "ПередКонвертацией" Тогда
		
		РезультатОбновления = КонсольКодаПередКонвертацией.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаПередКонвертацией.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "ПередОтложеннымЗаполнением" Тогда
		
		РезультатОбновления = КонсольКодаПередОтложеннымЗаполнением.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаПередОтложеннымЗаполнением.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "ПослеКонвертации" Тогда
		
		РезультатОбновления = КонсольКодаПослеКонвертации.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаПослеКонвертации.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВсеКонсолиСформированы()
	
	Результат = Ложь;
	
	Если КонсольКодаПередКонвертациейСформирован 
		И КонсольКодаПередОтложеннымЗаполнениемСформирован 
		И КонсольКодаПослеКонвертацииСформирован Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Если Клиент Тогда
	СветлаяТемаАлгоритмПередКонвертацией = Истина;
	СветлаяТемаАлгоритмПередОтложеннымЗаполнением = Истина;
	СветлаяТемаАлгоритмПослеКонвертации = Истина;
	КонсольКодаПередКонвертациейСформирован = Ложь;
	КонсольКодаПередОтложеннымЗаполнениемСформирован = Ложь;
	КонсольКодаПослеКонвертацииСформирован = Ложь;
#КонецЕсли
