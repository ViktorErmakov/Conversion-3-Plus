
#Область ПрограммныйИнтерфейс

// Заполнет коллекцию метеданных и сохраняет результат в регистре сведений "БезопасноеХранилищеДанных".
//
// Параметры:
//  Запрос		 - Запрос - Подготовленный запрос по метаданным конфигурации.
//  Релиз - СправочникСсылка - Релизы.
//
Процедура ЗаполнитьОписаниеМетеданных(Запрос, Релиз) Экспорт
	
	РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
	
	СоответствиеКоллекцииМетаданных = Расш1_КоллекцияМетаданных.СоответствиеКоллекцииМетаданных();
	
	// Описание всех объектов конфигурации.
	КоллекцияМетаданных = Новый Структура();
	
	ЗаполнитьРеквизитыОбъектов(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных);
	ЗаполнитьПредопределенныеЗначения(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных);
	СохранитьОписаниеМетаданныхВИБ(КоллекцияМетаданных, Релиз);
	//ЗаполнитьОбщиеМодули(КоллекцияМетаданных, СоответствиеКоллекцииМетаданных, Новый Структура);
	
КонецПроцедуры

// Получить описание json параметра ДанныеИБ.
//
// Параметры:
//  ОписаниеМетаданных	 - Структура - описание метаданных конвертации.
//  ОбъектВыборки		 - Строка - тип и наименования объекта выборки.
// 
// Возвращаемое значение:
//   - Структрура.
//
Функция ПолучитьОписаниеДанныеИБ(ОписаниеМетаданных, ОбъектВыборки) Экспорт
	
	НужнаяСтруктура = Неопределено;
	
	ОписаниеВыборки = СтрРазделить(ОбъектВыборки, ".");
	ТипВыборки = ОписаниеВыборки[0];
	Если ТипВыборки = "СправочникСсылка" Тогда
		
		Для Каждого Справочник Из ОписаниеМетаданных.catalogs Цикл
			
			НаименованиеОбъекта = ОписаниеВыборки[1];
			Если Справочник.Ключ = НаименованиеОбъекта Тогда
				
				НужнаяСтруктура = Справочник;
				ref = "catalogs." + НаименованиеОбъекта + ".obj";
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипВыборки = "ДокументСсылка" Тогда
		
		Для Каждого Документ Из ОписаниеМетаданных.documents Цикл
			
			НаименованиеОбъекта = ОписаниеВыборки[1];
			Если Документ.Ключ = НаименованиеОбъекта Тогда
				
				НужнаяСтруктура = Документ;
				ref = "documents." + НаименованиеОбъекта + ".obj";
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НужнаяСтруктура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеИБ = Новый Структура;
	ДанныеИБ.Вставить("name", НужнаяСтруктура.Ключ);
	ДанныеИБ.Вставить("ref", ref);
	
	Возврат ДанныеИБ;
	
КонецФункции

// Получить описание json параметра обработчика "компоненты обмена".
//
// Параметры:
//  Направление	 - Строка - направление обмена.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьОписаниеКомпонентыОбмена(Направление) Экспорт
	
	КомпонентыОбменаИсходные = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена(Направление);
	КомпонентыОбмена = ПолучитьСтруктуруСвойств(КомпонентыОбменаИсходные);
	Возврат КомпонентыОбмена;
	
КонецФункции

// Получить описание json параметра обработчика "использование ПКО".
//
// Параметры:
//  ИспользованиеПКО - Структура - первоначальная структура содержащая список ПКО и значение использования.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьОписаниеИспользованиеПКО(ИспользованиеПКО) Экспорт
	Возврат ПолучитьСтруктуруСвойств(ИспользованиеПКО);
КонецФункции

// Получить описание параметры конвертации.
//
// Параметры:
//  ИмяКонвертации	 - Строка.
// 
// Возвращаемое значение:
//   - Структура.
//
Функция ПолучитьОписаниеПараметрыКонвертации(ИмяКонвертации) Экспорт
	ПараметрыКонвертации = Справочники.Конвертации.ЗаполнитьПараметрыКонвертации(ИмяКонвертации);
	Возврат ПолучитьСтруктуруСвойств(ПараметрыКонвертации);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьРеквизитыОбъектов(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных)
	
	ВыборкаВидМетаданных = РезультатЗапросаПакет[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидМетаданных.Следующий() Цикл
		
		ОписаниеКоллекции = Новый Структура();
		
		ВидОбъекта = ВыборкаВидМетаданных.ВидОбъекта;
		
		ВидОбъектаДляКоллекции = СоответствиеКоллекцииМетаданных[ВидОбъекта];
		Если ВидОбъектаДляКоллекции = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаРеквизитыИмяОбъект = ВыборкаВидМетаданных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРеквизитыИмяОбъект.Следующий() Цикл
			
			ИмяОбъекта = ВыборкаРеквизитыИмяОбъект.ИмяОбъекта;
			
			ОписаниеРеквизитов = Новый Структура();
			
			ВыборкаРеквизитыТЧ = ВыборкаРеквизитыИмяОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаРеквизитыТЧ.Следующий() Цикл
				
				Если ВыборкаРеквизитыТЧ.ТабличнаяЧасть.Пустая() Тогда
					
					// Это реквизиты объекта.
					ВыборкаРеквизиты = ВыборкаРеквизитыТЧ.Выбрать();
					Пока ВыборкаРеквизиты.Следующий() Цикл
						
						ИмяРеквизита = ВыборкаРеквизиты.Реквизит;
						СвойстваРеквизита = Новый Структура("name", ВыборкаРеквизиты.СинонимРеквизита);
						ОписаниеРеквизитов.Вставить(ИмяРеквизита, СвойстваРеквизита);
						
					КонецЦикла;
					
				Иначе
					
					// Это табличная часть.
					НаименованиеТЧ = ВыборкаРеквизитыТЧ.ТабличнаяЧасть.Наименование;
					ИмяТЧОбъекта = СтрЗаменить(НаименованиеТЧ, "{", "");
					ИмяТЧОбъекта = СтрЗаменить(ИмяТЧОбъекта, "}", "");
					ТабличнаяЧастьОбъекта = Новый Структура("name", ИмяТЧОбъекта);
					
					ВыборкаРеквизиты = ВыборкаРеквизитыТЧ.Выбрать();
					Пока ВыборкаРеквизиты.Следующий() Цикл
						
						ИмяРеквизита = ВыборкаРеквизиты.Реквизит;
						СвойстваРеквизита = Новый Структура("name", ВыборкаРеквизиты.СинонимРеквизита);
						ТабличнаяЧастьОбъекта.Вставить(ИмяРеквизита, СвойстваРеквизита);
						
					КонецЦикла;
					
					ОписаниеРеквизитов.Вставить(ИмяТЧОбъекта, ТабличнаяЧастьОбъекта);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураОбъекта = Новый Структура("properties", ОписаниеРеквизитов);
			ОписаниеКоллекции.Вставить(ИмяОбъекта, СтруктураОбъекта);
			
		КонецЦикла;
		КоллекцияМетаданных.Вставить(ВидОбъектаДляКоллекции, ОписаниеКоллекции);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеЗначения(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных)
	
	ВыборкаВидМетаданных = РезультатЗапросаПакет[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидМетаданных.Следующий() Цикл
		
		ВидОбъекта = ВыборкаВидМетаданных.ВидОбъекта;
		ВидОбъектаДляКоллекции = СоответствиеКоллекцииМетаданных[ВидОбъекта];
		Если КоллекцияМетаданных.Свойство(ВидОбъектаДляКоллекции) Тогда
			ЭтоПеречисление = Ложь;
			ОписаниеКоллекции = КоллекцияМетаданных[ВидОбъектаДляКоллекции];
		Иначе
			ЭтоПеречисление = Истина;
			ОписаниеКоллекции = Новый Структура;
		КонецЕсли;
			
		ВыборкаИмяОбъекта = ВыборкаВидМетаданных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИмяОбъекта.Следующий() Цикл
			
			ИмяОбъекта = ВыборкаИмяОбъекта.ИмяОбъекта;
			
			Если ОписаниеКоллекции.Свойство(ИмяОбъекта) Тогда
				СтруктураОбъекта = ОписаниеКоллекции[ИмяОбъекта];
			Иначе
				СтруктураОбъекта = Новый Структура;
			КонецЕсли;
			
			ОписаниеПредопределенных = Новый Структура();
			ВыборкаПредопределенноеЗначение = ВыборкаИмяОбъекта.Выбрать();
			Пока ВыборкаПредопределенноеЗначение.Следующий() Цикл
				
				Значение = ВыборкаПредопределенноеЗначение.ПредопределенныеЗначения;
				ОписаниеПредопределенных.Вставить(Значение, "");
				
			КонецЦикла;
			
			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
			
			Если ЭтоПеречисление Тогда
				ОписаниеКоллекции.Вставить(ИмяОбъекта, СтруктураОбъекта);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоПеречисление Тогда
			КоллекцияМетаданных.Вставить(ВидОбъектаДляКоллекции, ОписаниеКоллекции);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьОписаниеМетаданныхВИБ(КоллекцияМетаданных, Релиз) Экспорт
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Релиз, КоллекцияМетаданных);
КонецПроцедуры

Процедура ЗаполнитьОбщиеМодули(КоллекцияМетаданных, СоответствиеКоллекцииМетаданных, Данные)
	
	ОписаниеКоллекции = Новый Структура();
	//
	//Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
	//	ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
	//	ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
	//КонецЦикла;
	
	
	
	ВидОбъектаДляКоллекции = СоответствиеКоллекцииМетаданных["ОбщиеМодули"];
	КоллекцияМетаданных.Вставить(ВидОбъектаДляКоллекции, ОписаниеКоллекции);
	
КонецПроцедуры

Функция ПолучитьСтруктуруСвойств(ИсходнаяСтруктура, ИмяСвойства = "")
	
	ОписаниеСтруктуры = Новый Структура;
	СвойстваСтруктуры = Новый Структура;
	
	Для Каждого Свойство Из ИсходнаяСтруктура Цикл
		
		
		Тип = ТипЗнч(Свойство.Значение);
		Если Тип = Тип("Структура") Тогда
			
			// Если это вложенная структура, то необходимо давать имя свойству.
			СвойстваВложеннойСтруктуры = ПолучитьСтруктуруСвойств(Свойство.Значение, Свойство.Ключ);
			СвойстваСтруктуры.Вставить(Свойство.Ключ, СвойстваВложеннойСтруктуры);
			
		ИначеЕсли Свойство.Значение = Неопределено Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ);
			
		ИначеЕсли Тип = Тип("Строка") 
			Или Тип = Тип("Число") 
			Или Тип = Тип("Булево") Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ, Строка(Тип));
			
		ИначеЕсли Тип = Тип("Массив") Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ, Строка(Тип), "classes.Массив");
			
		ИначеЕсли Тип = Тип("Соответствие") Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ, Строка(Тип), "classes.Соответствие");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяСвойства) Тогда
		ОписаниеСтруктуры.Вставить("name", ИмяСвойства);
	КонецЕсли;
	
	ОписаниеСтруктуры.Вставить("ref", "classes.Структура");
	ОписаниеСтруктуры.Вставить("properties", СвойстваСтруктуры);
	
	Возврат ОписаниеСтруктуры;
	
КонецФункции

Процедура ЗаполнитьСтруктуруСвойства(СвойстваКомпонентыОбмена, Ключ, Тип = "", ref = "")
	
	СтукрутаСвойства = Новый Структура;
	СтукрутаСвойства.Вставить("name", Тип);
	
	Если Не ПустаяСтрока(ref) Тогда
		СтукрутаСвойства.Вставить("ref", ref);
	КонецЕсли;
	
	СвойстваКомпонентыОбмена.Вставить(Ключ, СтукрутаСвойства);
	
КонецПроцедуры

#КонецОбласти
