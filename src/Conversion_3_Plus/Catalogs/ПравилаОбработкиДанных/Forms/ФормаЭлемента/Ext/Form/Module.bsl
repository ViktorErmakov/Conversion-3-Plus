
#Область ОписаниеПеременных

&НаКлиенте
Перем КонсольКодаПриОбработке;

&НаКлиенте
Перем КонсольКодаВыборкаДанных;

&НаКлиенте
Перем ПриОбработкеHTMLСфомирован;

&НаКлиенте
Перем ВыборкаДанныхHTMLСформирован;

&НаКлиенте
Перем СветлаяТемаАлгоритмПриОбработке;

&НаКлиенте
Перем СветлаяТемаАлгоритмВыборкаДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура Расш1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если КонвертацияXDTO Тогда
		
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПриОбработке, Элементы.Страница_ПриОбработке, ЭтотОбъект);
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмВыборкаДанных, Элементы.Страница_ВыборкаДанных, ЭтотОбъект);
		
		Расш1_КонсольКода.СоздатьРеквизит(ЭтотОбъект, "Конвертация", "СправочникСсылка.Конвертации");
		ЭтотОбъект["Конвертация"] = Параметры.Конвертация;
		
		Элементы.НаправлениеАлгоритмВыборкаДанныхHTML.Видимость = Ложь;
		Элементы.НаправлениеАлгоритмПриОбработкеHTML.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПриОткрытииПосле(Отказ)
	
	Если КонвертацияXDTO Тогда
		
		ЭтотОбъект[Элементы.АлгоритмПриОбработке.Имя + "HTML"] = АдресКонсолиКода;
		
		Если Объект.ИспользоватьДляОтправки Тогда
			ЭтотОбъект[Элементы.АлгоритмВыборкаДанных.Имя + "HTML"] = АдресКонсолиКода;
		Иначе
			ВыборкаДанныхHTMLСформирован = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	
	Если КонвертацияXDTO Тогда
		
		// Запишем новый текст в реквизиты.
		Если Объект.ИспользоватьДляПолучения Тогда
			Объект.АлгоритмПриОбработке = КонсольКодаПриОбработке.getText();
		КонецЕсли;
		
		Если Объект.ИспользоватьДляОтправки Тогда
			Объект.АлгоритмВыборкаДанных = КонсольКодаВыборкаДанных.getText();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_СтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	ПослеФормированияКонсолейКода();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПриОбработкеHTMLСформирован(Элемент)
	
	КонсольКодаПриОбработке = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПриОбработке, 
		Объект.АлгоритмПриОбработке, 
		ПриОбработкеHTMLСфомирован);
	
	ПослеФормированияКонсолейКода();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриОбработкеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмВыборкаДанныхHTMLСформирован(Элемент)
	
	КонсольКодаВыборкаДанных = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаВыборкаДанных, 
		Объект.АлгоритмВыборкаДанных, 
		ВыборкаДанныхHTMLСформирован);
	
	ПослеФормированияКонсолейКода();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмВыборкаДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СменитьТемуАлгоритмПриОбработкеHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПриОбработке.Имя + "HTML", СветлаяТемаАлгоритмПриОбработке);
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмВыборкаДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмВыборкаДанных.Имя + "HTML", СветлаяТемаАлгоритмВыборкаДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПриОбработкеHTML()
	КонсольКодаПриОбработке.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмВыборкаДанных()
	КонсольКодаВыборкаДанных.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеФормированияКонсолейКода()
	
	Если ПриОбработкеHTMLСфомирован 
		И ВыборкаДанныхHTMLСформирован Тогда
		
		ЗначениеДоступности = Ложь;
		КонсольКодаПриОбработке.setReadOnly(ЗначениеДоступности);
		КонсольКодаВыборкаДанных.setReadOnly(ЗначениеДоступности);
		
		ЗаполнитьПараметрыОбработчиков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОбработчиков()
	
	ИспользованиеПКО = Новый Структура;
	
	Если Элементы.СтраницыОбработчикиXDTO.ТекущаяСтраница.Имя = "Страница_ПриОбработке" 
		И ИспользоватьНесколькоПравилКонвертации Тогда
		
		Для Каждого СтрокаПравил Из Объект.ПравилаКонвертацииОбъектов Цикл
			ИспользованиеПКО.Вставить(СтрокаПравил.ПравилоКонвертацииОбъекта, Истина);
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыОбработчикиXDTO.ТекущаяСтраница.Имя = "Страница_ПриОбработке" Тогда
		ИспользованиеПКО.Вставить(Объект.ПравилоКонвертацииОбъекта, Истина);
	КонецЕсли;
	
	Если Не ИспользованиеПКО.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОписаниеПараметровОбработчиков(ИспользованиеПКО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеПараметровОбработчиков(ИспользованиеПКО)
	
	ОписаниеПользовательскихОбъектовJSON = 
		ПолучитьОписаниеПараметровJSON(Объект.ОбъектВыборки, Объект.ИспользоватьДляОтправки, ИспользованиеПКО);
	
	ОбновитьОписаниеПараметровОбработчиковВоВсехКонсолях(ОписаниеПользовательскихОбъектовJSON);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПараметровJSON(
		Знач ОбъектВыборки = "", ИспользоватьДляОтправки, Знач ИспользованиеПКО = Неопределено)
	
	Если ИспользоватьДляОтправки Тогда
		Направление = "Отправка";
	Иначе
		Направление = "Получение";
	КонецЕсли;
	
	// Заполнение общих параметров обработчиков ПОД.
	ПользовательскиеОбъекты = Новый Структура;
	КомпонентыОбмена = Расш1_КоллекцияМетаданных.ПолучитьОписаниеКомпонентыОбмена(Направление);
	ПользовательскиеОбъекты.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	
	Если Не ПустаяСтрока(ОбъектВыборки) И ИспользоватьДляОтправки Тогда
		ДанныеИБ = Расш1_КоллекцияМетаданных.ПолучитьОписаниеДанныеИБ(ОбъектВыборки);
		ПользовательскиеОбъекты.Вставить("ДанныеИБ", ДанныеИБ);
	КонецЕсли;
	
	Если ИспользованиеПКО <> Неопределено И 
		 ТипЗнч(ИспользованиеПКО) = Тип("Структура") И
		 ИспользованиеПКО.Количество() > 0 Тогда
		
		ИспользованиеПКОJson = Расш1_КоллекцияМетаданных.ПолучитьОписаниеИспользованиеПКО(ИспользованиеПКО);
		ПользовательскиеОбъекты.Вставить("ИспользованиеПКО", ИспользованиеПКОJson);
		
	КонецЕсли;
	
	ОписаниеПользовательскихОбъектов = Новый Структура;
	ОписаниеПользовательскихОбъектов.Вставить("customObjects", ПользовательскиеОбъекты);
	
	ОписаниеПользовательскихОбъектовJSON = 
		Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданныхJSON(ОписаниеПользовательскихОбъектов);
	
	Возврат ОписаниеПользовательскихОбъектовJSON;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОписаниеПараметровОбработчиковВоВсехКонсолях(ОписаниеПараметровJSON = Неопределено)
	
	АдресОбновления = "";
	РезультатОбновления = КонсольКодаПриОбработке.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
	
	Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
		КонсольКодаПриОбработке.triggerSuggestions();
	Иначе
		Ошибка = РезультатОбновления.errorDescription;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
	КонецЕсли;
	
	Если Объект.ИспользоватьДляОтправки Тогда
		
		РезультатОбновления = КонсольКодаВыборкаДанных.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаВыборкаДанных.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Клиент Тогда
	ПриОбработкеHTMLСфомирован = Ложь;
	ВыборкаДанныхHTMLСформирован = Ложь;
	СветлаяТемаАлгоритмПриОбработке = Истина;
	СветлаяТемаАлгоритмВыборкаДанных = Истина;
#КонецЕсли