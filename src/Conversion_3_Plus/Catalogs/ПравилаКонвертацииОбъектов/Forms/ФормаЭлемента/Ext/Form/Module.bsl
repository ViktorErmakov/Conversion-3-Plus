#Область ОписаниеПеременных

&НаКлиенте
Перем КонсольКодаПриОтправке;

&НаКлиенте
Перем КонсольКодаПередПолучениемДанных;

&НаКлиенте
Перем КонсольКодаПриПолученниДанных;

&НаКлиенте
Перем КонсольКодаПослеЗагрузкиВсехДанных;

&НаКлиенте
Перем ПриОтправкеДанныхHTMLСфомирован;

&НаКлиенте
Перем ПередПолучениемДанныхHTMLСформирован;

&НаКлиенте
Перем ПриПолученииДанныхHTMLСформирован;

&НаКлиенте
Перем ПослеЗагрузкиВсехДанныхСформирован;

&НаКлиенте
Перем СветлаяТемаАлгоритмПриОтправкеДанных;

&НаКлиенте
Перем СветлаяТемаАлгоритмПередПолучениемДанных;

&НаКлиенте
Перем СветлаяТемаАлгоритмПриПолученииДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура Расш1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если ЭтоКонвертацияXDTO Тогда
		
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПриОтправкеДанных, Элементы.Страница_ПриОтправке, ЭтотОбъект);
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПередПолучениемДанных, Элементы.Страница_ПриКонвертацииДанныхXDTO, ЭтотОбъект);
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПриПолученииДанных, Элементы.Страница_ПередЗаписьюПолученныхДанных, ЭтотОбъект);
		Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПослеЗагрузкиВсехДанныхТекст, Элементы.Страница_ПослеЗагрузкиВсехДанных, ЭтотОбъект);
		
		Расш1_КонсольКода.СоздатьРеквизит(ЭтотОбъект, "Конвертация", "СправочникСсылка.Конвертации");
		ЭтотОбъект["Конвертация"] = Параметры.Конвертация;
		
		ИзменитьУсловноеОформление();
		
		Элементы.Страница_ОбработчикиXDTO.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПриОткрытииПосле(Отказ)
	
	Если ЭтоКонвертацияXDTO Тогда
		
		Если ОбластьПрименения = 1 Тогда
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПередПолучениемДанных.Имя);
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПриПолученииДанных.Имя);
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПослеЗагрузкиВсехДанныхТекст.Имя);
		ИначеЕсли ОбластьПрименения = 0 Тогда
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПриОтправкеДанных.Имя);
		Иначе
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПередПолучениемДанных.Имя);
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПриПолученииДанных.Имя);
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПослеЗагрузкиВсехДанныхТекст.Имя);
			Расш1_КонсольКода.НазначитьРеквизитуКонсолиАдрес(ЭтотОбъект, Элементы.АлгоритмПриОтправкеДанных.Имя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	
	Если ЭтоКонвертацияXDTO Тогда
		
		// Запишем новый текст в реквизиты.
		Если ОбластьПрименения = 0 Тогда
			Объект.АлгоритмПриОтправкеДанных = КонсольКодаПриОтправке.getText();
		КонецЕсли;
		
		Если ОбластьПрименения = 1 Тогда
			Объект.АлгоритмПередПолучениемДанных = КонсольКодаПередПолучениемДанных.getText();
			Объект.АлгоритмПриПолученииДанных = КонсольКодаПриПолученниДанных.getText();
		КонецЕсли;
		
		Если ОбластьПрименения = 2 Тогда
			Объект.АлгоритмПриОтправкеДанных = КонсольКодаПриОтправке.getText();
			Объект.АлгоритмПередПолучениемДанных = КонсольКодаПередПолучениемДанных.getText();
			Объект.АлгоритмПриПолученииДанных = КонсольКодаПриПолученниДанных.getText();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_СтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "Страница_ОбработчикиXDTO" Тогда
		Если ОбластьПрименения = 1 Тогда
			ПослеФормированияКонсолей("Страница_ПриКонвертацииДанныхXDTO");
		Иначе
			ПослеФормированияКонсолей("Страница_ПриОтправке");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ОбработчикиXMLПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	ПослеФормированияКонсолей(ТекущаяСтраница.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПриОтправкеДанныхHTMLСформирован(Элемент)
	
	КонсольКодаПриОтправке = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПриОтправке, 
		Объект.АлгоритмПриОтправкеДанных, 
		ПриОтправкеДанныхHTMLСфомирован);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриОтправкеДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемДанныхHTMLСформирован(Элемент)
	
	КонсольКодаПередПолучениемДанных = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПередПолучениемДанных, 
		Объект.АлгоритмПередПолучениемДанных, 
		ПередПолучениемДанныхHTMLСформирован);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриПолученииДанныхHTMLСформирован(Элемент)
	
	КонсольКодаПриПолученниДанных = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПриПолученниДанных, 
		Объект.АлгоритмПриПолученииДанных, 
		ПриПолученииДанныхHTMLСформирован);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриПолученииДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПослеЗагрузкиВсехДанныхТекстHTMLСформирован(Элемент)
	
	КонсольКодаПослеЗагрузкиВсехДанных = Элемент.Документ.defaultView;
	
	Расш1_КонсольКода.УстановкаАтрибутовКонсолиКода(
		КонсольКодаПослеЗагрузкиВсехДанных, 
		АлгоритмПослеЗагрузкиВсехДанныхТекст, 
		ПослеЗагрузкиВсехДанныхСформирован);
	
	КонсольКодаПослеЗагрузкиВсехДанных.setReadOnly(Истина);
	
	ПослеФормированияКонсолей();
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_АлгоритмПослеЗагрузкиВсехДанныхОткрытиеВместо(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.АлгоритмПослеЗагрузкиВсехДанных) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокНаАлгоритмы = СсылкиНаАлгоритмыПоИмени(Объект.АлгоритмПослеЗагрузкиВсехДанных, СписокКонвертаций);
	Если МассивСсылокНаАлгоритмы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если МассивСсылокНаАлгоритмы.Количество() = 1 Тогда
		ПараметрыФормы = Новый Структура("Ключ");
		ПараметрыФормы.Ключ = МассивСсылокНаАлгоритмы[0];
		ИмяФормыАлгоритм = "Справочник.Алгоритмы.ФормаОбъекта";
	Иначе
		ПараметрыФормы = Новый Структура("ТребованияКОтбору");
		ПараметрыФормы.ТребованияКОтбору = МассивСсылокНаАлгоритмы;
		ИмяФормыАлгоритм = "Справочник.Алгоритмы.ФормаСписка";
	КонецЕсли;
	
	// Добавлена строка +++
	ПараметрыФормы.Вставить("Конвертация", ЭтотОбъект["Конвертация"]);
	// Добавлена строка ---
	
	ОткрытьФорму(ИмяФормыАлгоритм, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_Тумблер_ОбластьПримененияПриИзмененииПосле(Элемент)
	
	Элементы.НаправлениеАлгоритмПриОтправкеДанныхHTML.Заголовок = "Направление";
	Элементы.НаправлениеАлгоритмПередПолучениемДанныхHTML.Заголовок = "Направление";
	Элементы.НаправлениеАлгоритмПриПолученииДанныхHTML.Заголовок = "Направление";
	Элементы.Страница_ОбработчикиXDTO.Доступность = Ложь;
	
	ИзменитьУсловноеОформление();
	
	Расш1_ПриОткрытииПосле(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_АлгоритмПослеЗагрузкиВсехДанныхПриИзмененииПосле(Элемент)
	
	// Прочитаем текст из реквизита.
	КонсольКодаПослеЗагрузкиВсехДанных.updateText(АлгоритмПослеЗагрузкиВсехДанныхТекст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СменитьТемуАлгоритмПриОтправкеДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПриОтправкеДанных.Имя + "HTML", СветлаяТемаАлгоритмПриОтправкеДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПриОтправкеДанныхHTML()
	КонсольКодаПриОтправке.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмПередПолучениемДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПередПолучениемДанных.Имя + "HTML", СветлаяТемаАлгоритмПередПолучениемДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПередПолучениемДанныхHTML()
	КонсольКодаПередПолучениемДанных.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмПриПолученииДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПриПолученииДанных.Имя + "HTML", СветлаяТемаАлгоритмПриПолученииДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПриПолученииДанныхHTML()
	КонсольКодаПриПолученниДанных.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПриОтправкеДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПриОтправкеДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПередПолучениемДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПередПолучениемДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПриПолученииДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПриПолученииДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменитьУсловноеОформление()
	
	ВидимостьНаправления = Объект.ИспользоватьДляОтправки И Объект.ИспользоватьДляПолучения;
	Элементы.НаправлениеАлгоритмПриОтправкеДанныхHTML.Видимость = ВидимостьНаправления;
	Элементы.НаправлениеАлгоритмПередПолучениемДанныхHTML.Видимость = ВидимостьНаправления;
	Элементы.НаправлениеАлгоритмПриПолученииДанныхHTML.Видимость = ВидимостьНаправления;
	
	Элементы.АлгоритмПослеЗагрузкиВсехДанныхТекстHTMLПанельКоманд.Видимость = Ложь;
	Элементы.ПоказатьТекстАлгоритмаПослеЗагрузкиВсехДанных.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНаправления(Команда)
	
	ПослеФормированияКонсолей();
	
	Элементы[Команда.Имя].Родитель.Заголовок = Элементы[Команда.Имя].Заголовок;
	Элементы[Команда.Имя].Родитель.Картинка = Элементы[Команда.Имя].Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормированияКонсолей(ИмяСтраницы = "")
	
	Если ОбластьПрименения = 1 
		И ПередПолучениемДанныхHTMLСформирован 
		И ПриПолученииДанныхHTMLСформирован
		И ПослеЗагрузкиВсехДанныхСформирован Тогда
		
		Элементы.Страница_ОбработчикиXDTO.Доступность = Истина;
		
	ИначеЕсли ОбластьПрименения = 0 
		И ПриОтправкеДанныхHTMLСфомирован Тогда
		
		Элементы.Страница_ОбработчикиXDTO.Доступность = Истина;
		
	ИначеЕсли ОбластьПрименения = 2
		И ПриОтправкеДанныхHTMLСфомирован
		И ПередПолучениемДанныхHTMLСформирован
		И ПриПолученииДанныхHTMLСформирован
		И ПослеЗагрузкиВсехДанныхСформирован Тогда
		
		Элементы.Страница_ОбработчикиXDTO.Доступность = Истина;
		
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя <> "Страница_ОбработчикиXDTO" Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбластьПрименения = 2 Тогда
		Направление = "";
	ИначеЕсли ОбластьПрименения = 0 Тогда
		Направление = "Отправка";
	Иначе
		Направление = "Получение";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяСтраницы) Тогда
		ИмяСтраницы = Элементы.ОбработчикиXDTO.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	ОписаниеПользовательскихОбъектовJSON = 
		ПолучитьОписаниеПараметровJSON(ЭтотОбъект["Конвертация"], Объект.ОбъектКонфигурации, Направление, ИмяСтраницы);
	
	ОбновитьОписаниеПараметровОбработчиковВоВсехКонсолях(ОписаниеПользовательскихОбъектовJSON, ИмяСтраницы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеПараметровJSON(Знач Конвертация, Знач ОбъектКонфигурации, Знач Направление, Знач ИмяСтраницы)
	
	ПользовательскиеОбъекты = Новый Структура;
	
	Если Не ПустаяСтрока(Направление) Тогда
		КомпонентыОбмена = Расш1_КоллекцияМетаданных.ПолучитьОписаниеКомпонентыОбмена(Направление);
		ПользовательскиеОбъекты.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОбъектКонфигурации) Тогда
		ДанныеИБ = Расш1_КоллекцияМетаданных.ПолучитьОписаниеДанныеИБ(ОбъектКонфигурации);
		ПользовательскиеОбъекты.Вставить("ДанныеИБ", ДанныеИБ);
	КонецЕсли;
	
	Если ИмяСтраницы = "Страница_ПриОтправке" Тогда
		
		ПараметрыКонвертации = Расш1_КоллекцияМетаданных.ПолучитьОписаниеПараметрыКонвертации(Конвертация);
		ПользовательскиеОбъекты.Вставить("ПараметрыКонвертации", ПараметрыКонвертации);
		
		// Описать эти объекты нет возможности, т.к. они формируются в процессе обмена в базах приемника и источника.
		ПользовательскиеОбъекты.Вставить("ДанныеXDTO", "");
		ПользовательскиеОбъекты.Вставить("СтекВыгрузки", "");
		
	ИначеЕсли ИмяСтраницы = "Страница_ПриКонвертацииДанныхXDTO" Тогда
		
		// Описать эти объекты нет возможности, т.к. они формируются в процессе обмена в базах приемника и источника.
		ПользовательскиеОбъекты.Вставить("ДанныеXDTO", "");
		ПользовательскиеОбъекты.Вставить("ПолученныеДанные", "");
		
	ИначеЕсли ИмяСтраницы = "Страница_ПередЗаписьюПолученныхДанных" Тогда
		
		// Описать эти объекты нет возможности, т.к. они формируются в процессе обмена в базах приемника и источника.
		ПользовательскиеОбъекты.Вставить("КонвертацияСвойств", "");
		ПользовательскиеОбъекты.Вставить("ПолученныеДанные", "");
		
	КонецЕсли;
	
	ОписаниеПользовательскихОбъектов = Новый Структура;
	ОписаниеПользовательскихОбъектов.Вставить("customObjects", ПользовательскиеОбъекты);
	
	ОписаниеПользовательскихОбъектовJSON = 
		Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданныхJSON(ОписаниеПользовательскихОбъектов);
	
	Возврат ОписаниеПользовательскихОбъектовJSON;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОписаниеПараметровОбработчиковВоВсехКонсолях(ОписаниеПараметровJSON, ИмяСтраницы)
	
	АдресОбновления = "";
	Если ИмяСтраницы = "Страница_ПриКонвертацииДанныхXDTO" Тогда
		
		РезультатОбновления = КонсольКодаПередПолучениемДанных.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаПередПолучениемДанных.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "Страница_ПередЗаписьюПолученныхДанных" Тогда
		
		РезультатОбновления = КонсольКодаПриПолученниДанных.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаПриПолученниДанных.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "Страница_ПриОтправке" Тогда
		
		РезультатОбновления = КонсольКодаПриОтправке.updateMetadata(ОписаниеПараметровJSON, АдресОбновления);
		
		Если ТипЗнч(РезультатОбновления) = Тип("Булево") Тогда
			КонсольКодаПриОтправке.triggerSuggestions();
		Иначе
			Ошибка = РезультатОбновления.errorDescription;
			ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Клиент Тогда
	ПриОтправкеДанныхHTMLСфомирован = Ложь;
	ПередПолучениемДанныхHTMLСформирован = Ложь;
	ПриПолученииДанныхHTMLСформирован = Ложь;
	ПослеЗагрузкиВсехДанныхСформирован = Ложь;
	СветлаяТемаАлгоритмПриОтправкеДанных = Истина;
	СветлаяТемаАлгоритмПередПолучениемДанных = Истина;
	СветлаяТемаАлгоритмПриПолученииДанных = Истина;
#КонецЕсли
