#Область ОписаниеПеременных

&НаКлиенте
Перем КонсольКодаПриОтправке;

&НаКлиенте
Перем КонсольКодаПередПолучениемДанных;

&НаКлиенте
Перем КонсольКодаПриПолученниДанных;

&НаКлиенте
Перем КонсольКодаПослеЗагрузкиВсехДанных;

&НаКлиенте
Перем ПриОтправкеДанныхHTMLСфомирован;

&НаКлиенте
Перем ПередПолучениемДанныхHTMLСформирован;

&НаКлиенте
Перем ПриПолученииДанныхHTMLСформирован;

//&НаКлиенте
//Перем ПослеЗагрузкиВсехДанныхСформирован;

&НаКлиенте
Перем СветлаяТемаАлгоритмПриОтправкеДанных;

&НаКлиенте
Перем СветлаяТемаАлгоритмПередПолучениемДанных;

&НаКлиенте
Перем СветлаяТемаАлгоритмПриПолученииДанных;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура Расш1_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПриОтправкеДанных, Элементы.Страница_ПриОтправке, ЭтотОбъект);
	Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПередПолучениемДанных, Элементы.Страница_ПриКонвертацииДанныхXDTO, ЭтотОбъект);
	Расш1_КонсольКода.СоздатьКонсоль(Элементы.АлгоритмПриПолученииДанных, Элементы.Страница_ПередЗаписьюПолученныхДанных, ЭтотОбъект);
	Элементы.АлгоритмПослеЗагрузкиВсехДанныхТекст.Видимость = Истина;
	
	Расш1_КонсольКода.СоздатьРеквизит(ЭтотОбъект, "Конвертация");
	
	// Создаем реквизит для хранения описания метаданных. Нужно хранить т.к. мы подаем это описание потом при формировании консолек.
	Расш1_КонсольКода.СоздатьРеквизит(ЭтотОбъект, "ОписаниеМетаданныхJSON");
	
	УстановитьВидимостьНаправления();
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПриОткрытииПосле(Отказ)
	
	ЭтотОбъект[Элементы.АлгоритмПриОтправкеДанных.Имя + "HTML"] = АдресКонсолиКода;
	
	Если Объект.ИспользоватьДляПолучения Тогда
		ЭтотОбъект[Элементы.АлгоритмПередПолучениемДанных.Имя + "HTML"] = АдресКонсолиКода;
		ЭтотОбъект[Элементы.АлгоритмПриПолученииДанных.Имя + "HTML"] = АдресКонсолиКода;
		//ПослеЗагрузкиВсехДанныхHTML = АдресКонсолиКода;
	Иначе
		ЭтотОбъект[Элементы.АлгоритмПередПолучениемДанных.Имя + "HTML"] = АдресКонсолиКода;
		ЭтотОбъект[Элементы.АлгоритмПриПолученииДанных.Имя + "HTML"] = АдресКонсолиКода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_ПередЗаписьюПосле(Отказ, ПараметрыЗаписи)
	
	// Запишем новый текст в реквизиты.
	Если Объект.ИспользоватьДляОтправки Тогда
		Объект.АлгоритмПриОтправкеДанных = КонсольКодаПриОтправке.getText();
	КонецЕсли;
	
	Если Объект.ИспользоватьДляПолучения Тогда
		Объект.АлгоритмПередПолучениемДанных = КонсольКодаПередПолучениемДанных.getText();
		Объект.АлгоритмПриПолученииДанных = КонсольКодаПриПолученниДанных.getText();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АлгоритмПриОтправкеДанныхHTMLСформирован(Элемент)
	
	КонсольКодаПриОтправке = Элемент.Документ.defaultView;
	Расш1_КонсольКода.ИнициализацияРедактора(КонсольКодаПриОтправке, Объект.АлгоритмПриОтправкеДанных);
	ПриОтправкеДанныхHTMLСфомирован = Истина;
	ОпределитьКонвертацию();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриОтправкеДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемДанныхHTMLСформирован(Элемент)
	
	КонсольКодаПередПолучениемДанных = Элемент.Документ.defaultView;
	Расш1_КонсольКода.ИнициализацияРедактора(КонсольКодаПередПолучениемДанных, Объект.АлгоритмПередПолучениемДанных);
	ПередПолучениемДанныхHTMLСформирован = Истина;
	ОпределитьКонвертацию();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПередПолучениемДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриПолученииДанныхHTMLСформирован(Элемент)
	
	КонсольКодаПриПолученниДанных = Элемент.Документ.defaultView;
	Расш1_КонсольКода.ИнициализацияРедактора(КонсольКодаПриПолученниДанных, Объект.АлгоритмПриПолученииДанных);
	ПриПолученииДанныхHTMLСформирован = Истина;
	ОпределитьКонвертацию();
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмПриПолученииДанныхHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Расш1_КонсольКода.ПриНажатии(ЭтотОбъект, ДанныеСобытия);
КонецПроцедуры

//&НаКлиенте
//Процедура Расш1_ПослеЗагрузкиВсехДанныхHTMLДокументСформированПосле(Элемент)
//	
//	КонсольКодаПослеЗагрузкиВсехДанных = Элементы.ПриОтправкеДанныхHTML.Документ.defaultView;
//	Расш1_КонсольКода.ИнициализацияРедактора(КонсольКодаПослеЗагрузкиВсехДанных, АлгоритмПослеЗагрузкиВсехДанных.Алгоритм);
//	
//КонецПроцедуры

&НаКлиенте
Процедура Расш1_Тумблер_ОбластьПримененияПриИзмененииПосле(Элемент)
	
	Элементы.НаправлениеАлгоритмПриОтправкеДанныхHTML.Заголовок = "Направление";
	Элементы.НаправлениеАлгоритмПередПолучениемДанныхHTML.Заголовок = "Направление";
	Элементы.НаправлениеАлгоритмПриПолученииДанныхHTML.Заголовок = "Направление";
	
	УстановитьВидимостьНаправления();
	
КонецПроцедуры

&НаКлиенте
Процедура Расш1_СтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "Страница_ОбработчикиXDTO" 
		Или ТекущаяСтраница.Имя = "Страница_ПриОтправке" 
		Или ТекущаяСтраница.Имя = "Страница_ПриКонвертацииДанныхXDTO" 
		Или ТекущаяСтраница.Имя = "Страница_ПередЗаписьюПолученныхДанных" Тогда
		
		ОбновитьОписаниеМетаданных(Элементы.ОбработчикиXDTO.ТекущаяСтраница.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СменитьТемуАлгоритмПриОтправкеДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПриОтправкеДанных.Имя + "HTML", СветлаяТемаАлгоритмПриОтправкеДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПриОтправкеДанныхHTML()
	КонсольКодаПриОтправке.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмПередПолучениемДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПередПолучениемДанных.Имя + "HTML", СветлаяТемаАлгоритмПередПолучениемДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПередПолучениемДанныхHTML()
	КонсольКодаПередПолучениемДанных.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура СменитьТемуАлгоритмПриПолученииДанныхHTML(Команда)
	Расш1_КонсольКода.СменитьТему(ЭтотОбъект, Элементы.АлгоритмПриПолученииДанных.Имя + "HTML", СветлаяТемаАлгоритмПриПолученииДанных);
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьВхожденияАлгоритмПриПолученииДанныхHTML()
	КонсольКодаПриПолученниДанных.editor.trigger("", "editor.action.changeAll");
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПриОтправкеДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПриОтправкеДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПередПолучениемДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПередПолучениемДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаАлгоритмПриПолученииДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеАлгоритмПриПолученииДанныхHTML(Команда)
	ПриИзмененииНаправления(Команда);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОпределитьКонвертацию()
	
	Если Объект.ИспользоватьДляОтправки И Объект.ИспользоватьДляПолучения Тогда
		
		Если ПриОтправкеДанныхHTMLСфомирован 
			И ПередПолучениемДанныхHTMLСформирован
			И ПриПолученииДанныхHTMLСформирован Тогда
			
			УстановитьЗначениеРеквизитаКонвертация();
			
		КонецЕсли;
		
	ИначеЕсли Объект.ИспользоватьДляОтправки Тогда
		
		Если ПриОтправкеДанныхHTMLСфомирован Тогда
			
			УстановитьЗначениеРеквизитаКонвертация();
			
		КонецЕсли;
		
	Иначе
		
		Если ПередПолучениемДанныхHTMLСформирован
			И ПриПолученииДанныхHTMLСформирован Тогда
			
			УстановитьЗначениеРеквизитаКонвертация();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеРеквизитаКонвертация()
	
	Если СписокКонвертаций.Количество() > 1 Тогда
		Расш1_КонсольКода.ПоискНаименованияТекущейКонвертации(ЭтотОбъект.ВладелецФормы, ЭтотОбъект);
	Иначе
		ЭтотОбъект["Конвертация"] = СписокКонвертаций[0].Значение;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьОписаниеМетаданных(ИмяСтраницы = "")
	
	Если Объект.ИспользоватьДляОтправки И Объект.ИспользоватьДляПолучения Тогда
		Направление = "";
	ИначеЕсли Объект.ИспользоватьДляОтправки Тогда
		Направление = "Отправка";
	Иначе
		Направление = "Получение";
	КонецЕсли;
	
	ЭтотОбъект["ОписаниеМетаданныхJSON"] = 
		ПолучитьОписаниеМетаданныхJSON(ЭтотОбъект["Конвертация"], Объект.ОбъектКонфигурации, Направление, ИмяСтраницы);
	ОбновитьОписаниеМетаданныхВоВсехКонсоляхОбработчиков();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОписаниеМетаданныхJSON(Знач Конвертация, Знач ОбъектКонфигурации, Знач Направление, Знач ИмяСтраницы = "")
	
	ОписаниеМетаданных = Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданных(Справочники.Конвертации.НайтиПоНаименованию(Конвертация));
	
	// Заполнение общих параметров обработчиков ПОД.
	ПользовательскиеОбъекты = Новый Структура;
	
	Если Не ПустаяСтрока(Направление) Тогда
		КомпонентыОбмена = Справочники.Конфигурации.ПолучитьОписаниеКомпонентыОбмена(Направление);
		ПользовательскиеОбъекты.Вставить("КомпонентыОбмена", КомпонентыОбмена);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ОбъектКонфигурации) Тогда
		ДанныеИБ = Справочники.Конфигурации.ПолучитьОписаниеДанныеИБ(ОписаниеМетаданных, ОбъектКонфигурации);
		ПользовательскиеОбъекты.Вставить("ДанныеИБ", ДанныеИБ);
	КонецЕсли;
	
	Если ИмяСтраницы = "Страница_ПриОтправке" Тогда
		
		ПараметрыКонвертации = Справочники.Конфигурации.ПолучитьОписаниеПараметрыКонвертации(Конвертация);
		ПользовательскиеОбъекты.Вставить("ПараметрыКонвертации", ПараметрыКонвертации);
		
		// Описать эти объекты нет возможности, т.к. они формируются в процессе обмена в базах приемника и источника.
		ПользовательскиеОбъекты.Вставить("ДанныеXDTO", "");
		ПользовательскиеОбъекты.Вставить("СтекВыгрузки", "");
		
	ИначеЕсли ИмяСтраницы = "Страница_ПриКонвертацииДанныхXDTO" Тогда
		
		// Описать эти объекты нет возможности, т.к. они формируются в процессе обмена в базах приемника и источника.
		ПользовательскиеОбъекты.Вставить("ДанныеXDTO", "");
		ПользовательскиеОбъекты.Вставить("ПолученныеДанные", "");
		
	ИначеЕсли ИмяСтраницы = "Страница_ПередЗаписьюПолученныхДанных" Тогда
		
		// Описать эти объекты нет возможности, т.к. они формируются в процессе обмена в базах приемника и источника.
		ПользовательскиеОбъекты.Вставить("КонвертацияСвойств", "");
		ПользовательскиеОбъекты.Вставить("ПолученныеДанные", "");
		
	КонецЕсли;
	
	ОписаниеМетаданных.Вставить("customObjects", ПользовательскиеОбъекты);
	
	ОписаниеМетаданныхJSON = Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданныхJSON(ОписаниеМетаданных);
	
	Возврат ОписаниеМетаданныхJSON;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииНаправления(Команда)
	
	ОбновитьОписаниеМетаданныхПоНаправлению(Команда.Имя);
	ОбновитьОписаниеМетаданныхВоВсехКонсоляхОбработчиков();
	Элементы[Команда.Имя].Родитель.Заголовок = Элементы[Команда.Имя].Заголовок;
	Элементы[Команда.Имя].Родитель.Картинка = Элементы[Команда.Имя].Картинка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеМетаданныхПоНаправлению(ИмяКоманды)
	
	Направление = ЭтотОбъект.Команды.Найти(ИмяКоманды).Заголовок;
	ЭтотОбъект["ОписаниеМетаданныхJSON"] = ПолучитьОписаниеМетаданныхJSON(ЭтотОбъект["Конвертация"], Объект.ОбъектКонфигурации, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеМетаданныхВоВсехКонсоляхОбработчиков()
	
	Если Объект.ИспользоватьДляОтправки Тогда
		КонсольКодаПриОтправке.updateMetadata(ЭтотОбъект["ОписаниеМетаданныхJSON"]);
	КонецЕсли;
	
	Если Объект.ИспользоватьДляПолучения Тогда
		КонсольКодаПередПолучениемДанных.updateMetadata(ЭтотОбъект["ОписаниеМетаданныхJSON"]);
		КонсольКодаПриПолученниДанных.updateMetadata(ЭтотОбъект["ОписаниеМетаданныхJSON"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаправления()
	
	ВидимостьНаправления = Объект.ИспользоватьДляОтправки И Объект.ИспользоватьДляПолучения;
	Элементы.НаправлениеАлгоритмПриОтправкеДанныхHTML.Видимость = ВидимостьНаправления;
	Элементы.НаправлениеАлгоритмПередПолучениемДанныхHTML.Видимость = ВидимостьНаправления;
	Элементы.НаправлениеАлгоритмПриПолученииДанныхHTML.Видимость = ВидимостьНаправления;
	
КонецПроцедуры

#КонецОбласти

#Если Клиент Тогда
	ПриОтправкеДанныхHTMLСфомирован = Ложь;
	ПередПолучениемДанныхHTMLСформирован = Ложь;
	ПриПолученииДанныхHTMLСформирован = Ложь;
	СветлаяТемаАлгоритмПриОтправкеДанных = Истина;
	СветлаяТемаАлгоритмПередПолучениемДанных = Истина;
	СветлаяТемаАлгоритмПриПолученииДанных = Истина;
#КонецЕсли
