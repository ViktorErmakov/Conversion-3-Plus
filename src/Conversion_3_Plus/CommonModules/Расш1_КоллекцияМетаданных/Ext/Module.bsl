#Область ПрограммныйИнтерфейс

// Список объектов метаданных.
//
// Параметры:
//  ТипОбъектов		 - Строка - имя коллекции.
//  АдресОбновления	 - Строка - адрес для обновления в консоле VSC.
//  Релиз			 - СправочникСсылка - релиз конфигурации.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьСписокОбъектовМетаданных(ТипОбъектов, АдресОбновления, Релиз) Экспорт
	
	СписокОбъектовJSON = "";
	
	СписокОбъектов = Справочники.Объекты.ПолучитьОписаниеКоллекцииМетаданных(Релиз, ТипОбъектов);
	
	СписокОбъектовJSON = Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданныхJSON(СписокОбъектов);
	
	ИменаКоллекцииМетаданных = Расш1_МодульПовтИсп.НовыеИменаКоллекцииМетаданныхJSON();
	ИмяКоллекции = ИменаКоллекцииМетаданных[ТипОбъектов];
	
	АдресОбновления = ИмяКоллекции + ".items";
	
	Возврат СписокОбъектовJSON;
	
КонецФункции

// Описание объекта метаданных.
//
// Параметры:
//  ТипОбъекта		 - Строка - имя объекта метаданных полный путь.
//  АдресОбновления	 - Строка - адрес для обновления в консоле VSC.
//  Релиз			 - СправочникСсылка - релиз конфигурации.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПолучитьОписаниеОбъектаМетаданных(ТипОбъекта, АдресОбновления, Релиз) Экспорт
	
	СтруктураОбъекта = Новый Структура;
	ТипыСсылок = ТипыСсылок();
	
	ПутьОбъекта = СтрРазделить(ТипОбъекта, ".");
	ИмяКоллекции = ПутьОбъекта[0];
	ИмяОбъектаКонсоль = ПутьОбъекта[1];
	
	ИменаКоллекцииМетаданных = Расш1_МодульПовтИсп.НовыеИменаКоллекцииМетаданныхJSON();
	ИмяКоллекцииJSON = ИменаКоллекцииМетаданных[ИмяКоллекции];
	
	Запрос = Новый Запрос;
	
	//Установка значений параметров
	Запрос.УстановитьПараметр("Имя", ИмяОбъектаКонсоль);
	Запрос.УстановитьПараметр("Владелец", Релиз);
	
	ИмяОбъекта = "";
	
	ОписаниеРеквизитов = Новый Структура();
	
	Если Расш1_МодульПовтИсп.ОбъектМетаданныхИмеетТЧ(ИмяКоллекции) Тогда
		
		ОписаниеСсылочныхДанных(Запрос, СтруктураОбъекта, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок);
		
	ИначеЕсли Расш1_МодульПовтИсп.ОбъектМетаданныхИмеетИзмерения(ИмяКоллекции) Тогда
		
		ОписаниеРегистров(Запрос, СтруктураОбъекта, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок, ИмяКоллекции);
		
	ИначеЕсли ИмяКоллекции = "перечисления" Тогда
		
		ОписаниеПеречисления(Запрос, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок);
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Имя коллекции не учтено при разработки консоли, необходимо добавить!'"));
		
	КонецЕсли;
	
	Если ОписаниеРеквизитов.Количество() Тогда
		СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	КонецЕсли;
	
	АдресОбновления = ИмяКоллекцииJSON + ".items." + ИмяОбъекта;
	
	ОписаниеМетаданныхJSON = "";
	ОписаниеМетаданныхJSON = ПолучитьОписаниеМетаданныхJSON(СтруктураОбъекта);
	
	Возврат ОписаниеМетаданныхJSON;
	
КонецФункции


//// Заполняет коллекцию метеданных и сохраняет результат в регистре сведений "БезопасноеХранилищеДанных".
////
//// Параметры:
////  Запрос		 - Запрос - Подготовленный запрос по метаданным конфигурации.
////  Релиз - СправочникСсылка - Релизы.
////
//Процедура ЗаполнитьОписаниеМетеданных(Запрос, Релиз) Экспорт
//	
//	РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
//	
//	СоответствиеКоллекцииМетаданных = Расш1_МодульПовтИсп.НовыеИменаКоллекцииМетаданных();
//	
//	// Описание всех объектов конфигурации.
//	КоллекцияМетаданных = Новый Структура();
//	
//	ЗаполнитьРеквизитыОбъектов(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных);
//	ЗаполнитьПредопределенныеЗначения(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных);
//	ЗаполнитьОбщиеМодули(КоллекцияМетаданных, СоответствиеКоллекцииМетаданных, Новый Структура);
//	
//КонецПроцедуры

//Функция ПроверитьОписаниеМетаданныхКонвертации(Знач Конвертация) Экспорт
//	
//	ОписаниеМетаданных = Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданных(Конвертация);
//	Если ПустаяСтрока(ОписаниеМетаданных) Тогда
//		
//		// Загружаем описание.
//		Релиз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Конвертация, "Конфигурация");
//		Расш1_КоллекцияМетаданных.ОбновитьОписаниеМетаданных(Релиз);
//		ОписаниеМетаданных = Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданных(Конвертация);
//		
//	КонецЕсли;
//	
//	ОписаниеМетаданныхJSON = Расш1_КоллекцияМетаданных.ПолучитьОписаниеМетаданныхJSON(ОписаниеМетаданных);
//	
//	Возврат ОписаниеМетаданныхJSON;
//	
//КонецФункции

// Получить описание json параметра ДанныеИБ.
//
// Параметры:
//  ОбъектВыборки - Строка - тип и наименования объекта выборки.
// 
// Возвращаемое значение:
//   - Структрура.
//
Функция ПолучитьОписаниеДанныеИБ(ОбъектВыборки) Экспорт
	
	ОписаниеВыборки = СтрРазделить(ОбъектВыборки, ".");
	ТипВыборки = ОписаниеВыборки[0];
	НаименованиеОбъекта = ОписаниеВыборки[1];
	Если ТипВыборки = "СправочникСсылка" Тогда
		ref = "catalogs." + НаименованиеОбъекта + ".obj";
	ИначеЕсли ТипВыборки = "ДокументСсылка" Тогда
		ref = "documents." + НаименованиеОбъекта + ".obj";
	КонецЕсли;
	
	ДанныеИБ = Новый Структура;
	ДанныеИБ.Вставить("name", НаименованиеОбъекта);
	ДанныеИБ.Вставить("ref", ref);
	
	Возврат ДанныеИБ;
	
КонецФункции

// Получить описание json параметра обработчика "компоненты обмена".
//
// Параметры:
//  Направление	 - Строка - направление обмена.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьОписаниеКомпонентыОбмена(Направление) Экспорт
	
	КомпонентыОбменаИсходные = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена(Направление);
	КомпонентыОбмена = ПолучитьСтруктуруСвойств(КомпонентыОбменаИсходные);
	Возврат КомпонентыОбмена;
	
КонецФункции

// Получить описание json параметра обработчика "использование ПКО".
//
// Параметры:
//  ИспользованиеПКО - Структура - первоначальная структура содержащая список ПКО и значение использования.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьОписаниеИспользованиеПКО(ИспользованиеПКО) Экспорт
	Возврат ПолучитьСтруктуруСвойств(ИспользованиеПКО);
КонецФункции

// Получить описание параметры конвертации.
//
// Параметры:
//  Конвертация	 - СправочникСсылка - конвертация.
// 
// Возвращаемое значение:
//   - Структура.
//
Функция ПолучитьОписаниеПараметрыКонвертации(Конвертация) Экспорт
	ПараметрыКонвертации = Справочники.Конвертации.ЗаполнитьПараметрыКонвертации(Конвертация);
	Возврат ПолучитьСтруктуруСвойств(ПараметрыКонвертации);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Преобразует структуру описания конфигурации в формат JSON.
//
// Параметры:
//  КоллекцияМетаданных	 - Структура - коллекция метаданных.
// 
// Возвращаемое значение:
//   - Строка - в формате JSON.
//
Функция ПолучитьОписаниеМетаданныхJSON(КоллекцияМетаданных) Экспорт
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(Запись, КоллекцияМетаданных);
	Исключение
		ШаблонТекста = НСтр("ru = 'Не удалось сохранить коллекцию метаданных: %1 %2'");
		Текст = СтрШаблон(ШаблонТекста, Символы.ПС, ОписаниеОшибки());
		ВызватьИсключение Текст;
	КонецПопытки;
	
	Возврат Запись.Закрыть();
	
КонецФункции

// Читает строку JSON преобразуя ее в данные 1С.
//
// Параметры:
//  СтрокаJSON	 - Строка - описание объектов JSON.
// 
// Возвращаемое значение:
//   - ПроизовольныеДанные - в формате 1С предприятия.
//
//Функция ПрочитатьОписаниеМетаданныхJSON(СтрокаJSON) Экспорт
//	
//	Чтение = Новый ЧтениеJSON();
//	Чтение.УстановитьСтроку(СтрокаJSON);
//	Попытка
//		Данные = ПрочитатьJSON(Чтение);
//	Исключение
//		Текст = НСтр("Не удалось прочитать строку JSON:" + Символы.ПС + ОписаниеОшибки());
//		ВызватьИсключение Текст;
//	КонецПопытки;
//	
//	Чтение.Закрыть();
//	
//	Возврат Данные;
//	
//	
//	// Используется если при выгрузке не был указан явно тип объекта выгружаемого.
//	//Данные = СериализаторXDTO.ПрочитатьJSON(Чтение, Тип("СправочникОбъект.Контрагенты"));
//	
//	//Данные = СериализаторXDTO.ПрочитатьJSON(Чтение);
//	
//	//Чтение.Закрыть();
//	
//КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучитьОписание

#Область СсылочныеМетаданные

Процедура ОписаниеСсылочныхДанных(Запрос, СтруктураОбъекта, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Родитель КАК Родитель,
	|	Объекты.Имя КАК ИмяОбъекта
	|ПОМЕСТИТЬ Объект
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|ГДЕ
	|	Объекты.Владелец = &Владелец
	|	И Объекты.Имя = &Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект,
	|	Свойства.Ссылка КАК Свойство,
	|	Объект.ИмяОбъекта КАК ИмяОбъекта,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.Синоним КАК Синоним,
	|	Свойства.ТипыСтрокой КАК ТипыСвойства
	|ИЗ
	|	Объект КАК Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
	|		ПО Объект.Ссылка = Свойства.Владелец
	|			И (Свойства.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.Реквизит))
	|ГДЕ
	|	Свойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект,
	|	Свойства.Ссылка КАК Свойство,
	|	Объект.ИмяОбъекта КАК ИмяОбъекта,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.Синоним КАК Синоним
	|ПОМЕСТИТЬ ТабличныеЧасти
	|ИЗ
	|	Объект КАК Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
	|		ПО Объект.Ссылка = Свойства.Владелец
	|			И (Свойства.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.ТабличнаяЧасть))
	|ГДЕ
	|	Свойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧасти.Объект КАК Объект,
	|	ТабличныеЧасти.Свойство КАК Свойство,
	|	ТабличныеЧасти.ИмяОбъекта КАК ИмяОбъекта,
	|	ТабличныеЧасти.Наименование КАК Наименование,
	|	ТабличныеЧасти.Синоним КАК Синоним,
	|	Свойства.Наименование КАК НаименованиеРеквизитаТЧ,
	|	Свойства.Синоним КАК СинонимРеквизитаТЧ,
	|	Свойства.ТипыСтрокой КАК ТипыСтрокой
	|ИЗ
	|	ТабличныеЧасти КАК ТабличныеЧасти
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
	|		ПО ТабличныеЧасти.Свойство = Свойства.Родитель
	|ИТОГИ
	|	МАКСИМУМ(Объект),
	|	МАКСИМУМ(Свойство),
	|	МАКСИМУМ(ИмяОбъекта),
	|	МАКСИМУМ(Синоним)
	|ПО
	|	Наименование";
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	
	ЗаполнитьОписаниеРеквизитов(РезультатПакеты[1], ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок);
	
	ОписаниеТабличныхЧастей = ОписаниеТабличныхЧастей(РезультатПакеты[3], ИмяОбъекта, ОписаниеРеквизитов);
	Если ОписаниеТабличныхЧастей.Количество() Тогда
		СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРеквизитов(ПакетЗапроса, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок);
	
	Связи = Новый Соответствие();
	
	Реквизиты = ПакетЗапроса.Выбрать();
	Пока Реквизиты.Следующий() Цикл
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			ИмяОбъекта = Реквизиты.ИмяОбъекта;
		КонецЕсли;
		
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизиты, Связи, ТипыСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеТабличныхЧастей(ПакетЗапроса, ИмяОбъекта, ОписаниеРеквизитов);
	
	ОписаниеТабличныхЧастей = Новый Структура();
	ТабличныеЧастиГруппировка = ПакетЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ТабличныеЧастиГруппировка.Следующий() Цикл
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			ИмяОбъекта = ТабличныеЧастиГруппировка.ИмяОбъекта;
		КонецЕсли;
		
		ОписаниеРеквизитов.Вставить(
			ТабличныеЧастиГруппировка.Наименование, Новый Структура("name", "ТЧ: " + ТабличныеЧастиГруппировка.Синоним));
		
		ОписаниеТабличнойЧасти = Новый Структура();
		ТабличныеЧастиРеквизиты = ТабличныеЧастиГруппировка.Выбрать();
		Пока ТабличныеЧастиРеквизиты.Следующий() Цикл
			
			ОписаниеТабличнойЧасти.Вставить(
				ТабличныеЧастиРеквизиты.НаименованиеРеквизитаТЧ, 
				ТабличныеЧастиРеквизиты.СинонимРеквизитаТЧ);
			
		КонецЦикла;
		
		Если ОписаниеТабличнойЧасти.Количество() Тогда
			ОписаниеТабличныхЧастей.Вставить(ТабличныеЧастиГруппировка.Наименование, ОписаниеТабличнойЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОписаниеТабличныхЧастей;
	
КонецФункции

#КонецОбласти

#Область Регистры

Процедура ОписаниеРегистров(Запрос, СтруктураОбъекта, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок, ИмяКоллекции)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Родитель КАК Родитель,
	|	Объекты.Имя КАК ИмяОбъекта
	|ПОМЕСТИТЬ Объект
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|ГДЕ
	|	Объекты.Владелец = &Владелец
	|	И Объекты.Имя = &Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект,
	|	Свойства.Ссылка КАК Свойство,
	|	Объект.ИмяОбъекта КАК ИмяОбъекта,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.Синоним КАК Синоним,
	|	Свойства.ТипыСтрокой КАК ТипыСвойства
	|ИЗ
	|	Объект КАК Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
	|		ПО Объект.Ссылка = Свойства.Владелец
	|			И (Свойства.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.Измерение))
	|ГДЕ
	|	Свойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект,
	|	Свойства.Ссылка КАК Свойство,
	|	Объект.ИмяОбъекта КАК ИмяОбъекта,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.Синоним КАК Синоним,
	|	Свойства.ТипыСтрокой КАК ТипыСвойства
	|ИЗ
	|	Объект КАК Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
	|		ПО Объект.Ссылка = Свойства.Владелец
	|			И (Свойства.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.Ресурс))
	|ГДЕ
	|	Свойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.Ссылка КАК Объект,
	|	Свойства.Ссылка КАК Свойство,
	|	Объект.ИмяОбъекта КАК ИмяОбъекта,
	|	Свойства.Наименование КАК Наименование,
	|	Свойства.Синоним КАК Синоним,
	|	Свойства.ТипыСтрокой КАК ТипыСвойства
	|ИЗ
	|	Объект КАК Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Свойства КАК Свойства
	|		ПО Объект.Ссылка = Свойства.Владелец
	|			И (Свойства.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыСвойств.Свойство))
	|ГДЕ
	|	Свойства.Родитель = ЗНАЧЕНИЕ(Справочник.Свойства.ПустаяСсылка)";
	
	РезультатПакеты = Запрос.ВыполнитьПакет();
	
	Связи = Новый Соответствие();
	ДополнительныеСвойства = Новый Структура;
	
	ОписаниеИзмерений(РезультатПакеты[1], ИмяОбъекта, ОписаниеРеквизитов, Связи, ТипыСсылок);
	
	ОписаниеРесурсов = Новый Структура();
	ОписаниеРесурсов(РезультатПакеты[2], ИмяОбъекта, ОписаниеРесурсов, Связи, ТипыСсылок);
	
	ОписаниеСвойствРегистра(РезультатПакеты[3], ИмяКоллекции, ОписаниеРеквизитов, Связи, ТипыСсылок, ДополнительныеСвойства);
	
	СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
	
	Для Каждого Свойство Из ДополнительныеСвойства Цикл
		СтруктураОбъекта.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	Если ОписаниеРесурсов.Количество() Тогда
		СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОписаниеИзмерений(ПакетЗапроса, ИмяОбъекта, ОписаниеРеквизитов, Связи, ТипыСсылок)
	
	Измерения = ПакетЗапроса.Выбрать();
	Пока Измерения.Следующий() Цикл
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			ИмяОбъекта = Измерения.ИмяОбъекта;
		КонецЕсли;
		
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Измерения, Связи, ТипыСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписаниеРесурсов(ПакетЗапроса, ИмяОбъекта, ОписаниеРесурсов, Связи, ТипыСсылок)
	
	Ресурсы = ПакетЗапроса.Выбрать();
	Пока Ресурсы.Следующий() Цикл
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			ИмяОбъекта = Ресурсы.ИмяОбъекта;
		КонецЕсли;
		
		ДобавитьОписаниеРеквизита(ОписаниеРесурсов, Ресурсы, Связи, ТипыСсылок);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписаниеСвойствРегистра(ПакетЗапроса, ИмяКоллекции, ОписаниеРеквизитов, Связи, ТипыСсылок, ДополнительныеСвойства)
	
	ТипРегистра = "nonperiodical";
	
	ВыборкаСвойство = ПакетЗапроса.Выбрать();
	Пока ВыборкаСвойство.Следующий() Цикл
		
		ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, ВыборкаСвойство, Связи, ТипыСсылок);
		
		Если ВыборкаСвойство.Наименование = "Период" Тогда
			ТипРегистра = "periodical";
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("type", ТипРегистра);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ОписаниеПеречисления(Запрос, ИмяОбъекта, ОписаниеРеквизитов, ТипыСсылок)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Объекты.Ссылка КАК Ссылка,
	|	Объекты.Родитель КАК Родитель,
	|	Объекты.Имя КАК ИмяОбъекта
	|ПОМЕСТИТЬ Объект
	|ИЗ
	|	Справочник.Объекты КАК Объекты
	|ГДЕ
	|	Объекты.Владелец = &Владелец
	|	И Объекты.Имя = &Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Объект.Ссылка КАК Ссылка,
	|	ЗначенияОбъектов.Наименование КАК Наименование,
	|	Объект.ИмяОбъекта КАК ИмяОбъекта
	|ИЗ
	|	Объект КАК Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Значения КАК ЗначенияОбъектов
	|		ПО Объект.Ссылка = ЗначенияОбъектов.Владелец";
	
	РезультатЗапроса = Запрос.Выполнить();
	ПеречисленияВыборка = РезультатЗапроса.Выбрать();
	Пока ПеречисленияВыборка.Следующий() Цикл
		
		Если ПустаяСтрока(ИмяОбъекта) Тогда
			ИмяОбъекта = ПеречисленияВыборка.ИмяОбъекта;
		КонецЕсли;
		
		ОписаниеРеквизитов.Вставить(ПеречисленияВыборка.Наименование, Новый Структура("name", ПеречисленияВыборка.Наименование));
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ДобавитьОписаниеРеквизита(ОписаниеРеквизитов, Реквизит, Связи, ТипыСсылок)
	
	Связь = ПолучитьСвязьСОбъектомМетаданных(Реквизит.Свойство, Связи, Реквизит.ТипыСвойства, ТипыСсылок);
	
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Наименование, ОписаниеРеквизита);
	
КонецПроцедуры

Функция ПолучитьСвязьСОбъектомМетаданных(Реквизит, Связи, Типы, ТипыСсылок)
	
	Связь = "";
	СписокТипов = СтрРазделить(Типы, ",");
	
	Для Каждого Тип Из СписокТипов Цикл
		
		ЧастиТипа = СтрРазделить(Тип, ".");
		Если ТипыСсылок.Найти(ЧастиТипа[0]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвязьТипа = Связи[Тип];
		Если СвязьТипа = Неопределено Тогда
			
			// Сейчас связи описыватьются только для справочников и документов.
			// При желании, пожертвовав скоростью получения описания всех метаданных
			// сюда же можно добавить следующие элементы:
			// Метаданные.БизнесПроцессы businessProcesses
			// Метаданные.Задачи tasks
			// Метаданные.ПланыВидовРасчета chartsOfCalculationTypes
			// Метаданные.ПланыВидовХарактеристик chartsOfCharacteristicTypes
			// Метаданные.ПланыОбмена exchangePlans
			// Метаданные.ПланыСчетов сhartsOfAccounts
			
			
			//Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ЧастиТипа[0] = "СправочникСсылка" Тогда
				Связь = "catalogs." + ЧастиТипа[1];
				//ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			ИначеЕсли ЧастиТипа[0] = "ДокументСсылка" Тогда
				Связь = "documents." + ЧастиТипа[1];
			КонецЕсли;
			
			Связи[Тип] = Связь;
			
		Иначе
			
			Связь = СвязьТипа;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Связь;
	
КонецФункции

Функция ТипыСсылок()
	
	ТипыСсылок = Новый Массив;
	ТипыСсылок.Добавить("СправочникСсылка");
	ТипыСсылок.Добавить("ДокументСсылка");
	
	Возврат ТипыСсылок;
	
КонецФункции

//Процедура ЗаполнитьПредопределенныеЗначения(РезультатЗапросаПакет, СоответствиеКоллекцииМетаданных, КоллекцияМетаданных)
//	
//	ВыборкаВидМетаданных = РезультатЗапросаПакет[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВыборкаВидМетаданных.Следующий() Цикл
//		
//		ВидОбъекта = ВыборкаВидМетаданных.ВидОбъекта;
//		ВидОбъектаДляКоллекции = СоответствиеКоллекцииМетаданных[ВидОбъекта];
//		Если КоллекцияМетаданных.Свойство(ВидОбъектаДляКоллекции) Тогда
//			ЭтоПеречисление = Ложь;
//			ОписаниеКоллекции = КоллекцияМетаданных[ВидОбъектаДляКоллекции];
//		Иначе
//			ЭтоПеречисление = Истина;
//			ОписаниеКоллекции = Новый Структура;
//		КонецЕсли;
//			
//		ВыборкаИмяОбъекта = ВыборкаВидМетаданных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//		Пока ВыборкаИмяОбъекта.Следующий() Цикл
//			
//			ИмяОбъекта = ВыборкаИмяОбъекта.ИмяОбъекта;
//			
//			Если ОписаниеКоллекции.Свойство(ИмяОбъекта) Тогда
//				СтруктураОбъекта = ОписаниеКоллекции[ИмяОбъекта];
//			Иначе
//				СтруктураОбъекта = Новый Структура;
//			КонецЕсли;
//			
//			ОписаниеПредопределенных = Новый Структура();
//			ВыборкаПредопределенноеЗначение = ВыборкаИмяОбъекта.Выбрать();
//			Пока ВыборкаПредопределенноеЗначение.Следующий() Цикл
//				
//				Значение = ВыборкаПредопределенноеЗначение.ПредопределенныеЗначения;
//				ОписаниеПредопределенных.Вставить(Значение, "");
//				
//			КонецЦикла;
//			
//			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
//			
//			Если ЭтоПеречисление Тогда
//				ОписаниеКоллекции.Вставить(ИмяОбъекта, СтруктураОбъекта);
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		Если ЭтоПеречисление Тогда
//			КоллекцияМетаданных.Вставить(ВидОбъектаДляКоллекции, ОписаниеКоллекции);
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьОбщиеМодули(КоллекцияМетаданных, СоответствиеКоллекцииМетаданных, Данные)
//	
//	ОписаниеКоллекции = Новый Структура();
//	
//	//Увидел в справочнике релизов реквизит "КаталогGitРепозитория". 
//	//Не знаю, насколько этот справочник связан со всеми объектами конвертации, 
//	//но если связан и реквизит заполнен, можно в консоль отдавать список общих модулей и 
//	//при получении события EVENT_GET_METADATA с параметром module.xxxx 
//	//отдавать обратно текст из файла модуля ххх.bsl. 
//	//Тогда еще будет работать подсказка по функциям общих модулей 😉
//	//есть у консоли в API метод parseCommonModule
//	//Это так, идея на перспективу
//	
//	
//	
//	//Для НомерОбъекта = 0 По Коллекция.Количество() - 1 Цикл
//	//	ОбъектМетаданных = Коллекция.Получить(НомерОбъекта);
//	//	ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, Новый Структура());
//	//КонецЦикла;
//	
//	ВидОбъектаДляКоллекции = СоответствиеКоллекцииМетаданных["ОбщиеМодули"];
//	КоллекцияМетаданных.Вставить(ВидОбъектаДляКоллекции, ОписаниеКоллекции);
//	
//КонецПроцедуры

Функция ПолучитьСтруктуруСвойств(ИсходнаяСтруктура, ИмяСвойства = "")
	
	ОписаниеСтруктуры = Новый Структура;
	СвойстваСтруктуры = Новый Структура;
	
	Для Каждого Свойство Из ИсходнаяСтруктура Цикл
		
		
		Тип = ТипЗнч(Свойство.Значение);
		Если Тип = Тип("Структура") Тогда
			
			// Если это вложенная структура, то необходимо давать имя свойству.
			СвойстваВложеннойСтруктуры = ПолучитьСтруктуруСвойств(Свойство.Значение, Свойство.Ключ);
			СвойстваСтруктуры.Вставить(Свойство.Ключ, СвойстваВложеннойСтруктуры);
			
		ИначеЕсли Свойство.Значение = Неопределено Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ);
			
		ИначеЕсли Тип = Тип("Строка") 
			Или Тип = Тип("Число") 
			Или Тип = Тип("Булево") Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ, Строка(Тип));
			
		ИначеЕсли Тип = Тип("Массив") Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ, Строка(Тип), "classes.Массив");
			
		ИначеЕсли Тип = Тип("Соответствие") Тогда
			
			ЗаполнитьСтруктуруСвойства(СвойстваСтруктуры, Свойство.Ключ, Строка(Тип), "classes.Соответствие");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяСвойства) Тогда
		ОписаниеСтруктуры.Вставить("name", ИмяСвойства);
	КонецЕсли;
	
	ОписаниеСтруктуры.Вставить("ref", "classes.Структура");
	ОписаниеСтруктуры.Вставить("properties", СвойстваСтруктуры);
	
	Возврат ОписаниеСтруктуры;
	
КонецФункции

Процедура ЗаполнитьСтруктуруСвойства(СвойстваКомпонентыОбмена, Ключ, Тип = "", ref = "")
	
	СтукрутаСвойства = Новый Структура;
	СтукрутаСвойства.Вставить("name", Тип);
	
	Если Не ПустаяСтрока(ref) Тогда
		СтукрутаСвойства.Вставить("ref", ref);
	КонецЕсли;
	
	СвойстваКомпонентыОбмена.Вставить(Ключ, СтукрутаСвойства);
	
КонецПроцедуры

//Функция ОбъектМетаданныхИмеетПредопределенные(ПолноеИмя)
//	
//	Объекты = Новый Массив();
//	Объекты.Добавить("Справочник");
//	Объекты.Добавить("ПланСчетов");
//	Объекты.Добавить("ПланВидовХарактеристик");
//	Объекты.Добавить("ПланВидовРасчета");
//	
//	Возврат Объекты.Найти(ИмяМетаданных(ПолноеИмя)) <> Неопределено;
//	
//КонецФункции

#КонецОбласти

